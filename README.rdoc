== grape-activerecord

Simple integration of ActiveRecord connections and Rake tasks with Grape. Supports ActiveRecord 4.x.
Inspired by sinatra-activerecord (https://github.com/janko-m/sinatra-activerecord).

=== Add to your Gemfile

  gem 'grape-activerecord'

=== Enable ActiveRecord connection management

This is a middleware provided by ActiveRecord that makes sure your database connections are managed properly before and after every HTTP request. Add it to your config.ru file:

  use ActiveRecord::ConnectionAdapters::ConnectionManagement

=== Configure your database connection

By default, grape-activerecord looks for your database configuration in two places:

* A +config/database.yml+ file (see /examples for a sample file)
* The +DATABASE_URL+ environment variable (e.g. +postgres://user:pass@host/db+)

If the defaults aren't cool, you can configure the connection manually:

  # Use a different YAML file
  Grape::ActiveRecord.database_file = 'db.yml'

  # or a URL
  Grape::ActiveRecord.database_url = 'postgres://user:pass@host/db'

  # or a Hash
  Grape::ActiveRecord.database = {adapter: 'postgresql', host: 'localhost', database: 'db', username: 'user', password: 'pass', encoding: 'utf8', pool: 10, timeout: 5000}

=== Example Rakefile with ActiveRecord tasks

  require 'bundler/setup'
  require 'grape/activerecord/rake'

  namespace :db do
    # Some db tasks require your app code to be loaded
    task :environment do
      require_relative 'app'
    end
  end

This will give you most of the standard "db:" tasks you get in Rails. Run "bundle exec rake -T" to get a full list.
Note that unlike in Rails, creating a new migration is also a rake task:

  bundle exec rake db:create_migration NAME=create_widgets

=== Example app

Look under /examples for some example apps.
